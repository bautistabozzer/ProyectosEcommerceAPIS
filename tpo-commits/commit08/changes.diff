diff --git a/src/pages/DashboardProducts.jsx b/src/pages/DashboardProducts.jsx
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/src/pages/DashboardProducts.jsx
@@ -0,0 +1,217 @@
+import { useState } from "react"
+import { Link } from "react-router-dom"
+import { useAuth } from "../context/AuthContext"
+import { useToast } from "../context/ToastContext"
+import { useFetch } from "../hooks/useFetch"
+import { api } from "../services/api"
+import { formatPrice, formatDate } from "../utils/formatters"
+import LoadingSpinner from "../components/LoadingSpinner"
+import EmptyState from "../components/EmptyState"
+import SkeletonLoader from "../components/SkeletonLoader"
+import { Plus, Edit, Trash2, Package, Eye, Search } from "lucide-react"
+const DashboardProducts = () => {
+  const { user } = useAuth()
+  const { success, error } = useToast()
+  const [searchTerm, setSearchTerm] = useState("")
+  const [isDeleting, setIsDeleting] = useState(null)
+  const { data: allProducts, loading, error: fetchError, refetch } = useFetch(() => api.getProducts(), [])
+  
+  // Debug logging
+  console.log('DashboardProducts - Current user:', user)
+  console.log('DashboardProducts - All products:', allProducts)
+  console.log('DashboardProducts - User ID:', user?.id, 'Type:', typeof user?.id)
+  
+  // Filter products by current user (compare as strings to handle both numeric and string IDs)
+  const userProducts = allProducts?.filter((product) => {
+    const productOwnerId = String(product.ownerUserId)
+    const userId = String(user?.id)
+    const matches = productOwnerId === userId && productOwnerId !== 'null' && productOwnerId !== 'undefined'
+    console.log(`Product ${product.id}: ownerUserId=${product.ownerUserId} (${typeof product.ownerUserId}) -> ${productOwnerId}, user.id=${user?.id} (${typeof user?.id}) -> ${userId}, matches=${matches}`)
+    return matches
+  }) || []
+  
+  console.log('DashboardProducts - Filtered user products:', userProducts)
+  // Filter by search term
+  const filteredProducts = userProducts.filter((product) =>
+    product.name.toLowerCase().includes(searchTerm.toLowerCase()),
+  )
+  const handleDelete = async (productId, productName) => {
+    if (!window.confirm(`¿Estás seguro de que quieres eliminar "${productName}"?`)) {
+      return
+    }
+    setIsDeleting(productId)
+    try {
+      await api.deleteProduct(productId)
+      success(`${productName} eliminado exitosamente`)
+      refetch()
+    } catch (err) {
+      error("Error al eliminar el producto: " + err.message)
+    } finally {
+      setIsDeleting(null)
+    }
+  }
+  if (loading) {
+    return (
+      <div className="space-y-6">
+        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
+                  <div>
+          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Mis Productos</h1>
+          <p className="text-gray-600 dark:text-gray-300 mt-1">Gestiona tu inventario de productos</p>
+        </div>
+          <div className="h-10 bg-gray-200 rounded w-32 animate-pulse"></div>
+        </div>
+        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
+          <div className="relative max-w-md">
+            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
+              <Search className="h-5 w-5 text-gray-400" />
+            </div>
+            <input type="text" placeholder="Buscar productos..." className="input pl-10" disabled />
+          </div>
+          <div className="flex items-center gap-4 text-sm text-gray-400">
+            <span>Cargando estadísticas...</span>
+          </div>
+        </div>
+        <SkeletonLoader type="list" count={4} />
+      </div>
+    )
+  }
+  if (fetchError) {
+    return (
+      <div className="text-center py-12">
+        <p className="text-red-600 mb-4">Error al cargar los productos: {fetchError}</p>
+        <button onClick={refetch} className="btn btn-primary">
+          Reintentar
+        </button>
+      </div>
+    )
+  }
+  return (
+    <div className="space-y-6">
+      {/* Header */}
+      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
+        <div>
+          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Mis Productos</h1>
+          <p className="text-gray-600 dark:text-gray-300 mt-1">Gestiona tu inventario de productos</p>
+        </div>
+        <Link to="/dashboard/products/new" className="btn btn-primary inline-flex items-center gap-2">
+          <Plus size={18} />
+          Nuevo Producto
+        </Link>
+      </div>
+      {/* Search and Stats */}
+      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
+        {/* Search */}
+        <div className="relative max-w-md">
+          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
+            <Search className="h-5 w-5 text-gray-400" />
+          </div>
+          <input
+            type="text"
+            placeholder="Buscar productos..."
+            className="input pl-10"
+            value={searchTerm}
+            onChange={(e) => setSearchTerm(e.target.value)}
+          />
+        </div>
+        {/* Stats */}
+        <div className="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-300">
+          <span>Total: {userProducts.length} productos</span>
+          <span>En stock: {userProducts.filter((p) => p.stock > 0).length}</span>
+          <span>Sin stock: {userProducts.filter((p) => p.stock === 0).length}</span>
+        </div>
+      </div>
+      {/* Products List */}
+      {filteredProducts.length === 0 ? (
+        <EmptyState
+          icon={Package}
+          title={searchTerm ? "No se encontraron productos" : "No tienes productos"}
+          description={searchTerm ? "Intenta ajustar tu búsqueda" : "Comienza creando tu primer producto para vender"}
+          action={
+            !searchTerm && (
+              <Link to="/dashboard/products/new" className="btn btn-primary">
+                Crear primer producto
+              </Link>
+            )
+          }
+        />
+      ) : (
+        <div className="space-y-4">
+          {filteredProducts.map((product) => (
+            <ProductRow
+              key={product.id}
+              product={product}
+              onDelete={handleDelete}
+              isDeleting={isDeleting === product.id}
+            />
+          ))}
+        </div>
+      )}
+    </div>
+  )
+}
+const ProductRow = ({ product, onDelete, isDeleting }) => {
+  const isOutOfStock = product.stock === 0
+  return (
+    <div className="card p-6">
+      <div className="flex items-center space-x-4">
+        {/* Product Image */}
+        <div className="flex-shrink-0">
+          <img
+            src={product.images?.[0] || "/placeholder.svg?height=80&width=80"}
+            alt={product.name}
+            className="w-20 h-20 object-cover rounded-md"
+          />
+        </div>
+        {/* Product Info */}
+        <div className="flex-1 min-w-0">
+          <div className="flex items-start justify-between">
+            <div>
+              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">{product.name}</h3>
+              <p className="text-sm text-gray-600 dark:text-gray-300 mt-1 line-clamp-2">{product.description}</p>
+              <div className="flex items-center gap-4 mt-2">
+                <span className="text-lg font-bold text-blue-600 dark:text-blue-400">{formatPrice(product.price)}</span>
+                <span className={`text-sm font-medium ${isOutOfStock ? "text-red-600 dark:text-red-400" : "text-green-600 dark:text-green-400"}`}>
+                  {isOutOfStock ? "Sin stock" : `${product.stock} en stock`}
+                </span>
+                <span className="text-sm text-gray-500 dark:text-gray-400">Creado: {formatDate(product.createdAt)}</span>
+              </div>
+            </div>
+            {/* Actions */}
+            <div className="flex items-center space-x-2">
+              <Link
+                to={`/product/${product.id}`}
+                className="p-2 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-md transition-colors"
+                title="Ver producto"
+              >
+                <Eye size={18} />
+              </Link>
+              <Link
+                to={`/dashboard/products/${product.id}/edit`}
+                className="p-2 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-md transition-colors"
+                title="Editar producto"
+              >
+                <Edit size={18} />
+              </Link>
+              <button
+                onClick={() => onDelete(product.id, product.name)}
+                disabled={isDeleting}
+                className="p-2 text-gray-600 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition-colors disabled:opacity-50"
+                title="Eliminar producto"
+              >
+                {isDeleting ? <LoadingSpinner size="sm" /> : <Trash2 size={18} />}
+              </button>
+            </div>
+          </div>
+        </div>
+      </div>
+      {/* Stock Warning */}
+      {product.stock <= 5 && product.stock > 0 && (
+        <div className="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded-md">
+          <p className="text-sm text-yellow-800 dark:text-yellow-200">⚠️ Stock bajo: Solo quedan {product.stock} unidades</p>
+        </div>
+      )}
+    </div>
+  )
+}
+export default DashboardProducts
+
+diff --git a/src/pages/ProductForm.jsx b/src/pages/ProductForm.jsx
+new file mode 100644
+index 0000000..1234567
+--- /dev/null
+++ b/src/pages/ProductForm.jsx
@@ -0,0 +1,294 @@
+import { useState, useEffect } from "react"
+import { useParams, useNavigate, Link } from "react-router-dom"
+import { useAuth } from "../context/AuthContext"
+import { useToast } from "../context/ToastContext"
+import { useFetch } from "../hooks/useFetch"
+import { api } from "../services/api"
+import { validateRequired, validatePrice, validateStock } from "../utils/validators"
+import LoadingSpinner from "../components/LoadingSpinner"
+import ImageUploader from "../components/ImageUploader"
+import { ArrowLeft, Save, Package } from "lucide-react"
+const ProductForm = () => {
+  const { id } = useParams()
+  const navigate = useNavigate()
+  const { user } = useAuth()
+  const { success, error } = useToast()
+  const isEditing = Boolean(id)
+  const [formData, setFormData] = useState({
+    name: "",
+    description: "",
+    price: "",
+    stock: "",
+    categoryId: "",
+    images: [],
+  })
+  const [errors, setErrors] = useState({})
+  const [isSubmitting, setIsSubmitting] = useState(false)
+  // Fetch categories
+  const { data: categories } = useFetch(() => api.getCategories(), [])
+  // Fetch product data if editing
+  const { data: product, loading: productLoading } = useFetch(
+    () => (isEditing ? api.getProduct(id) : Promise.resolve(null)),
+    [id, isEditing],
+  )
+  // Populate form when editing
+  useEffect(() => {
+    if (isEditing && product) {
+      setFormData({
+        name: product.name || "",
+        description: product.description || "",
+        price: product.price?.toString() || "",
+        stock: product.stock?.toString() || "",
+        categoryId: product.categoryId?.toString() || "",
+        images: product.images || [],
+      })
+    }
+  }, [isEditing, product])
+  const handleChange = (e) => {
+    const { name, value } = e.target
+    setFormData((prev) => ({
+      ...prev,
+      [name]: value,
+    }))
+    // Clear error when user starts typing
+    if (errors[name]) {
+      setErrors((prev) => ({
+        ...prev,
+        [name]: "",
+      }))
+    }
+  }
+  const handleImagesChange = (images) => {
+    setFormData((prev) => ({
+      ...prev,
+      images,
+    }))
+    if (errors.images) {
+      setErrors((prev) => ({
+        ...prev,
+        images: "",
+      }))
+    }
+  }
+  const validateForm = () => {
+    const newErrors = {}
+    if (!validateRequired(formData.name)) {
+      newErrors.name = "El nombre es requerido"
+    }
+    if (!validateRequired(formData.description)) {
+      newErrors.description = "La descripción es requerida"
+    }
+    if (!validateRequired(formData.price)) {
+      newErrors.price = "El precio es requerido"
+    } else if (!validatePrice(formData.price)) {
+      newErrors.price = "El precio debe ser un número mayor a 0"
+    }
+    if (!validateRequired(formData.stock)) {
+      newErrors.stock = "El stock es requerido"
+    } else if (!validateStock(formData.stock)) {
+      newErrors.stock = "El stock debe ser un número mayor o igual a 0"
+    }
+    if (!validateRequired(formData.categoryId)) {
+      newErrors.categoryId = "La categoría es requerida"
+    }
+    if (formData.images.length === 0) {
+      newErrors.images = "Debe agregar al menos una imagen"
+    }
+    setErrors(newErrors)
+    return Object.keys(newErrors).length === 0
+  }
+  const handleSubmit = async (e) => {
+    e.preventDefault()
+    if (!validateForm()) {
+      return
+    }
+    setIsSubmitting(true)
+    try {
+      const productData = {
+        name: formData.name.trim(),
+        description: formData.description.trim(),
+        price: Number.parseFloat(formData.price),
+        stock: Number.parseInt(formData.stock),
+        categoryId: Number.parseInt(formData.categoryId),
+        images: formData.images,
+        ownerUserId: user.id, // Keep original type (string or number)
+      }
+      if (isEditing) {
+        await api.updateProduct(id, productData)
+        success("Producto actualizado exitosamente")
+      } else {
+        await api.createProduct(productData)
+        success("Producto creado exitosamente")
+      }
+      navigate("/dashboard/products")
+    } catch (err) {
+      error("Error al guardar el producto: " + err.message)
+    } finally {
+      setIsSubmitting(false)
+    }
+  }
+  if (isEditing && productLoading) {
+    return (
+      <div className="flex justify-center items-center min-h-64">
+        <LoadingSpinner size="lg" />
+      </div>
+    )
+  }
+  if (isEditing && !product) {
+    return (
+      <div className="text-center py-12">
+        <Package className="mx-auto h-12 w-12 text-gray-400 mb-4" />
+        <h3 className="text-lg font-medium text-gray-900 mb-2">Producto no encontrado</h3>
+        <p className="text-gray-600 mb-4">El producto que intentas editar no existe.</p>
+        <Link to="/dashboard/products" className="btn btn-primary">
+          Volver a mis productos
+        </Link>
+      </div>
+    )
+  }
+  return (
+    <div className="max-w-2xl mx-auto">
+      {/* Header */}
+      <div className="mb-8">
+        <Link
+          to="/dashboard/products"
+          className="inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors mb-4"
+        >
+          <ArrowLeft size={16} className="mr-1" />
+          Volver a mis productos
+        </Link>
+        <h1 className="text-3xl font-bold text-gray-900">{isEditing ? "Editar Producto" : "Nuevo Producto"}</h1>
+        <p className="text-gray-600 mt-1">
+          {isEditing ? "Modifica los datos de tu producto" : "Completa la información de tu nuevo producto"}
+        </p>
+      </div>
+      {/* Form */}
+      <form onSubmit={handleSubmit} className="space-y-6">
+        <div className="card p-6">
+          {/* Product Images */}
+          <div className="mb-6">
+            <label className="block text-sm font-medium text-gray-700 mb-2">
+              Imágenes del producto <span className="text-red-500">*</span>
+            </label>
+            <ImageUploader images={formData.images} onChange={handleImagesChange} />
+            {errors.images && <p className="mt-1 text-sm text-red-600">{errors.images}</p>}
+          </div>
+          {/* Product Name */}
+          <div className="mb-6">
+            <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
+              Nombre del producto <span className="text-red-500">*</span>
+            </label>
+            <input
+              type="text"
+              id="name"
+              name="name"
+              value={formData.name}
+              onChange={handleChange}
+              className={`input ${errors.name ? "border-red-500 focus:ring-red-500" : ""}`}
+              placeholder="Ej: iPhone 15 Pro Max"
+            />
+            {errors.name && <p className="mt-1 text-sm text-red-600">{errors.name}</p>}
+          </div>
+          {/* Description */}
+          <div className="mb-6">
+            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
+              Descripción <span className="text-red-500">*</span>
+            </label>
+            <textarea
+              id="description"
+              name="description"
+              rows={4}
+              value={formData.description}
+              onChange={handleChange}
+              className={`input resize-none ${errors.description ? "border-red-500 focus:ring-red-500" : ""}`}
+              placeholder="Describe las características principales de tu producto..."
+            />
+            {errors.description && <p className="mt-1 text-sm text-red-600">{errors.description}</p>}
+          </div>
+          {/* Price and Stock */}
+          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-6">
+            <div>
+              <label htmlFor="price" className="block text-sm font-medium text-gray-700 mb-2">
+                Precio (€) <span className="text-red-500">*</span>
+              </label>
+              <input
+                type="number"
+                id="price"
+                name="price"
+                step="0.01"
+                min="0"
+                value={formData.price}
+                onChange={handleChange}
+                className={`input ${errors.price ? "border-red-500 focus:ring-red-500" : ""}`}
+                placeholder="0.00"
+              />
+              {errors.price && <p className="mt-1 text-sm text-red-600">{errors.price}</p>}
+            </div>
+            <div>
+              <label htmlFor="stock" className="block text-sm font-medium text-gray-700 mb-2">
+                Stock <span className="text-red-500">*</span>
+              </label>
+              <input
+                type="number"
+                id="stock"
+                name="stock"
+                min="0"
+                value={formData.stock}
+                onChange={handleChange}
+                className={`input ${errors.stock ? "border-red-500 focus:ring-red-500" : ""}`}
+                placeholder="0"
+              />
+              {errors.stock && <p className="mt-1 text-sm text-red-600">{errors.stock}</p>}
+            </div>
+          </div>
+          {/* Category */}
+          <div className="mb-6">
+            <label htmlFor="categoryId" className="block text-sm font-medium text-gray-700 mb-2">
+              Categoría <span className="text-red-500">*</span>
+            </label>
+            <select
+              id="categoryId"
+              name="categoryId"
+              value={formData.categoryId}
+              onChange={handleChange}
+              className={`input ${errors.categoryId ? "border-red-500 focus:ring-red-500" : ""}`}
+            >
+              <option value="">Selecciona una categoría</option>
+              {categories?.map((category) => (
+                <option key={category.id} value={category.id}>
+                  {category.name}
+                </option>
+              ))}
+            </select>
+            {errors.categoryId && <p className="mt-1 text-sm text-red-600">{errors.categoryId}</p>}
+          </div>
+        </div>
+        {/* Submit Button */}
+        <div className="flex justify-end space-x-4">
+          <Link to="/dashboard/products" className="btn btn-secondary">
+            Cancelar
+          </Link>
+          <button
+            type="submit"
+            disabled={isSubmitting}
+            className="btn btn-primary flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
+          >
+            {isSubmitting ? (
+              <>
+                <LoadingSpinner size="sm" className="border-white border-t-transparent" />
+                {isEditing ? "Actualizando..." : "Creando..."}
+              </>
+            ) : (
+              <>
+                <Save size={18} />
+                {isEditing ? "Actualizar Producto" : "Crear Producto"}
+              </>
+            )}
+          </button>
+        </div>
+      </form>
+    </div>
+  )
+}
+export default ProductForm
+
+diff --git a/src/App.jsx b/src/App.jsx
+new file mode 100644
+index 0000000..1234567
+--- /dev/null
+++ b/src/App.jsx
@@ -0,0 +1,23 @@
+import { BrowserRouter } from "react-router-dom"
+import { AuthProvider } from "./context/AuthContext"
+import { CartProvider } from "./context/CartContext"
+import AppRouter from "./router"
+import { ToastProvider } from "./context/ToastContext"
+import ErrorBoundary from "./components/ErrorBoundary"
+function App() {
+  return (
+    <ErrorBoundary>
+      <BrowserRouter>
+        <AuthProvider>
+          <CartProvider>
+            <ToastProvider>
+              <AppRouter />
+            </ToastProvider>
+          </CartProvider>
+        </AuthProvider>
+      </BrowserRouter>
+    </ErrorBoundary>
+  )
+}
+export default App
+
+diff --git a/src/main.jsx b/src/main.jsx
+new file mode 100644
+index 0000000..1234567
+--- /dev/null
+++ b/src/main.jsx
@@ -0,0 +1,10 @@
+import React from "react"
+import ReactDOM from "react-dom/client"
+import App from "./App.jsx"
+import "./styles/global.css"
+ReactDOM.createRoot(document.getElementById("root")).render(
+  <React.StrictMode>
+    <App />
+  </React.StrictMode>,
+)
+
+diff --git a/src/router.jsx b/src/router.jsx
+new file mode 100644
+index 0000000..1234567
+--- /dev/null
+++ b/src/router.jsx
@@ -0,0 +1,83 @@
+import { Routes, Route } from "react-router-dom"
+import ProtectedRoute from "./components/ProtectedRoute"
+import Layout from "./components/Layout"
+// Pages
+import Login from "./pages/Login"
+import Register from "./pages/Register"
+import Home from "./pages/Home"
+import ProductDetail from "./pages/ProductDetail"
+import Cart from "./pages/Cart"
+import DashboardProducts from "./pages/DashboardProducts"
+import ProductForm from "./pages/ProductForm"
+function AppRouter() {
+  return (
+    <Routes>
+      {/* Public routes */}
+      <Route path="/login" element={<Login />} />
+      <Route path="/register" element={<Register />} />
+      {/* Protected routes */}
+      <Route
+        path="/"
+        element={
+          <ProtectedRoute>
+            <Layout>
+              <Home />
+            </Layout>
+          </ProtectedRoute>
+        }
+      />
+      <Route
+        path="/product/:id"
+        element={
+          <ProtectedRoute>
+            <Layout>
+              <ProductDetail />
+            </Layout>
+          </ProtectedRoute>
+        }
+      />
+      <Route
+        path="/cart"
+        element={
+          <ProtectedRoute>
+            <Layout>
+              <Cart />
+            </Layout>
+          </ProtectedRoute>
+        }
+      />
+      <Route
+        path="/dashboard/products"
+        element={
+          <ProtectedRoute>
+            <Layout>
+              <DashboardProducts />
+            </Layout>
+          </ProtectedRoute>
+        }
+      />
+      <Route
+        path="/dashboard/products/new"
+        element={
+          <ProtectedRoute>
+            <Layout>
+              <ProductForm />
+            </Layout>
+          </ProtectedRoute>
+        }
+      />
+      <Route
+        path="/dashboard/products/:id/edit"
+        element={
+          <ProtectedRoute>
+            <Layout>
+              <ProductForm />
+            </Layout>
+          </ProtectedRoute>
+        }
+      />
+    </Routes>
+  )
+}
+export default AppRouter

