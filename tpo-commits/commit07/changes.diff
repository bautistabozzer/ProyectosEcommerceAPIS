diff --git a/src/pages/Home.jsx b/src/pages/Home.jsx
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/src/pages/Home.jsx
@@ -0,0 +1,337 @@
+import { useState, useEffect } from "react"
+import { api } from "../services/api"
+import { useFetch } from "../hooks/useFetch"
+import ProductCard from "../components/ProductCard"
+import ProductListItem from "../components/ProductListItem"
+import CategoryPill from "../components/CategoryPill"
+import LoadingSpinner from "../components/LoadingSpinner"
+import EmptyState from "../components/EmptyState"
+import SkeletonLoader from "../components/SkeletonLoader"
+import ProductCarousel from "../components/ProductCarousel"
+import ViewControls from "../components/ViewControls"
+import { Search, Package, ChevronLeft, ChevronRight } from "lucide-react"
+const Home = () => {
+  const [searchTerm, setSearchTerm] = useState("")
+  const [selectedCategory, setSelectedCategory] = useState(null)
+  const [filteredProducts, setFilteredProducts] = useState([])
+  const [currentPage, setCurrentPage] = useState(1)
+  const [productsPerPage, setProductsPerPage] = useState(() => {
+    const saved = localStorage.getItem('productsPerPage')
+    return saved ? Number(saved) : 9
+  })
+  const [viewMode, setViewMode] = useState(() => {
+    const saved = localStorage.getItem('viewMode')
+    return saved || 'grid'
+  })
+  // Fetch products and categories
+  const {
+    data: products,
+    loading: productsLoading,
+    error: productsError,
+    refetch: refetchProducts,
+  } = useFetch(
+    () => api.getProducts({ search: searchTerm, categoryId: selectedCategory }),
+    [searchTerm, selectedCategory],
+  )
+  const {
+    data: categories,
+    loading: categoriesLoading,
+    error: categoriesError,
+  } = useFetch(() => api.getCategories(), [])
+  useEffect(() => {
+    if (products) {
+      setFilteredProducts(products)
+      setCurrentPage(1) // Reset to first page when filters change
+    }
+  }, [products])
+  const handleSearch = (e) => {
+    setSearchTerm(e.target.value)
+  }
+  const handleCategorySelect = (categoryId) => {
+    setSelectedCategory(categoryId === selectedCategory ? null : categoryId)
+  }
+  const clearFilters = () => {
+    setSearchTerm("")
+    setSelectedCategory(null)
+    setCurrentPage(1)
+  }
+
+  const handleItemsPerPageChange = (newItemsPerPage) => {
+    setProductsPerPage(newItemsPerPage)
+    setCurrentPage(1) // Reset to first page when changing items per page
+    localStorage.setItem('productsPerPage', newItemsPerPage.toString())
+  }
+
+  const handleViewModeChange = (newViewMode) => {
+    setViewMode(newViewMode)
+    localStorage.setItem('viewMode', newViewMode)
+  }
+
+  // Pagination logic
+  const totalPages = Math.ceil(filteredProducts?.length / productsPerPage) || 1
+  const startIndex = (currentPage - 1) * productsPerPage
+  const endIndex = startIndex + productsPerPage
+  const currentProducts = filteredProducts?.slice(startIndex, endIndex) || []
+
+  const handlePageChange = (page) => {
+    setCurrentPage(page)
+    window.scrollTo({ top: 0, behavior: 'smooth' })
+  }
+
+  // Get featured products (first 4 products with stock)
+  const featuredProducts = products?.filter(p => p.stock > 0).slice(0, 4) || []
+  if (productsLoading && !products) {
+    return (
+      <div className="space-y-8">
+        <div>
+          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">Catálogo de Productos</h1>
+          <p className="text-gray-600 dark:text-gray-300">Descubre nuestros productos organizados por categorías</p>
+        </div>
+        <div className="relative max-w-md">
+          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
+            <Search className="h-5 w-5 text-gray-400" />
+          </div>
+          <input
+            type="text"
+            placeholder="Buscar productos..."
+            className="input pl-10"
+            value={searchTerm}
+            onChange={handleSearch}
+            disabled
+          />
+        </div>
+        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
+          <div className="lg:col-span-1">
+            <div className="card p-6">
+              <div className="h-6 bg-gray-200 rounded w-1/2 mb-4 animate-pulse"></div>
+              <div className="space-y-2">
+                {[...Array(5)].map((_, i) => (
+                  <div key={i} className="h-8 bg-gray-200 rounded animate-pulse"></div>
+                ))}
+              </div>
+            </div>
+          </div>
+          <div className="lg:col-span-3">
+            <SkeletonLoader type="card" count={6} />
+          </div>
+        </div>
+      </div>
+    )
+  }
+  if (productsError) {
+    return (
+      <div className="text-center py-12">
+        <p className="text-red-600 mb-4">Error al cargar los productos: {productsError}</p>
+        <button onClick={refetchProducts} className="btn btn-primary">
+          Reintentar
+        </button>
+      </div>
+    )
+  }
+  return (
+    <div className="space-y-8">
+      {/* Header */}
+      <div>
+        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">Catálogo de Productos</h1>
+        <p className="text-gray-600 dark:text-gray-300">Descubre nuestros productos organizados por categorías</p>
+      </div>
+
+      {/* Featured Products Carousel */}
+      {featuredProducts.length > 0 && !searchTerm && !selectedCategory && (
+        <ProductCarousel products={featuredProducts} title="Productos Destacados" />
+      )}
+      {/* Search Bar */}
+      <div className="relative max-w-md">
+        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
+          <Search className="h-5 w-5 text-gray-400" />
+        </div>
+        <input
+          type="text"
+          placeholder="Buscar productos..."
+          className="input pl-10"
+          value={searchTerm}
+          onChange={handleSearch}
+        />
+      </div>
+      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
+        {/* Categories Sidebar */}
+        <div className="lg:col-span-1">
+          <div className="card p-6">
+            <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Categorías</h2>
+            {categoriesLoading ? (
+              <div className="flex justify-center py-4">
+                <LoadingSpinner size="sm" />
+              </div>
+            ) : categoriesError ? (
+              <p className="text-red-600 dark:text-red-400 text-sm">Error al cargar categorías</p>
+            ) : (
+              <div className="space-y-2">
+                <button
+                  onClick={clearFilters}
+                  className={`w-full text-left px-3 py-2 rounded-md text-sm transition-colors ${
+                    !selectedCategory 
+                      ? "bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 font-medium" 
+                      : "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
+                  }`}
+                >
+                  Todas las categorías
+                </button>
+                {categories?.map((category) => (
+                  <CategoryPill
+                    key={category.id}
+                    category={category}
+                    isSelected={selectedCategory === category.id}
+                    onClick={() => handleCategorySelect(category.id)}
+                  />
+                ))}
+              </div>
+            )}
+            {/* Active filters */}
+            {(searchTerm || selectedCategory) && (
+              <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-600">
+                <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-2">Filtros activos:</h3>
+                <div className="space-y-1">
+                  {searchTerm && (
+                    <div className="flex items-center justify-between text-sm">
+                      <span className="text-gray-600 dark:text-gray-300">Búsqueda: "{searchTerm}"</span>
+                      <button onClick={() => setSearchTerm("")} className="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300">
+                        ×
+                      </button>
+                    </div>
+                  )}
+                  {selectedCategory && (
+                    <div className="flex items-center justify-between text-sm">
+                      <span className="text-gray-600 dark:text-gray-300">
+                        Categoría: {categories?.find((c) => c.id === selectedCategory)?.name}
+                      </span>
+                      <button onClick={() => setSelectedCategory(null)} className="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300">
+                        ×
+                      </button>
+                    </div>
+                  )}
+                </div>
+                <button onClick={clearFilters} className="mt-2 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300">
+                  Limpiar todos los filtros
+                </button>
+              </div>
+            )}
+          </div>
+        </div>
+        {/* Products Grid */}
+        <div className="lg:col-span-3">
+          {productsLoading ? (
+            <div className="flex justify-center py-12">
+              <LoadingSpinner size="lg" />
+            </div>
+          ) : filteredProducts?.length === 0 ? (
+            <EmptyState
+              icon={Package}
+              title="No se encontraron productos"
+              description={
+                searchTerm || selectedCategory
+                  ? "Intenta ajustar tus filtros de búsqueda"
+                  : "No hay productos disponibles en este momento"
+              }
+              action={
+                (searchTerm || selectedCategory) && (
+                  <button onClick={clearFilters} className="btn btn-primary">
+                    Limpiar filtros
+                  </button>
+                )
+              }
+            />
+          ) : (
+            <>
+              {/* View Controls */}
+              <ViewControls
+                itemsPerPage={productsPerPage}
+                onItemsPerPageChange={handleItemsPerPageChange}
+                viewMode={viewMode}
+                onViewModeChange={handleViewModeChange}
+                totalItems={filteredProducts?.length || 0}
+                currentPage={currentPage}
+                totalPages={totalPages}
+              />
+
+              {/* Products display */}
+              {viewMode === 'grid' ? (
+                <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6">
+                  {currentProducts?.map((product) => (
+                    <ProductCard key={product.id} product={product} />
+                  ))}
+                </div>
+              ) : (
+                <div className="space-y-4">
+                  {currentProducts?.map((product) => (
+                    <ProductListItem key={product.id} product={product} />
+                  ))}
+                </div>
+              )}
+              
+              {/* Pagination */}
+              {totalPages > 1 && (
+                <div className="mt-8 flex items-center justify-center space-x-2">
+                  <button
+                    onClick={() => handlePageChange(currentPage - 1)}
+                    disabled={currentPage === 1}
+                    className="flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
+                  >
+                    <ChevronLeft size={16} className="mr-1" />
+                    Anterior
+                  </button>
+                  
+                  {/* Page numbers */}
+                  <div className="flex space-x-1">
+                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => {
+                      // Show first page, last page, current page, and pages around current
+                      const shouldShow = 
+                        page === 1 || 
+                        page === totalPages || 
+                        (page >= currentPage - 1 && page <= currentPage + 1)
+                      
+                      if (!shouldShow) {
+                        // Show ellipsis for gaps
+                        if (page === 2 && currentPage > 4) {
+                          return <span key={`ellipsis-${page}`} className="px-3 py-2 text-gray-500">...</span>
+                        }
+                        if (page === totalPages - 1 && currentPage < totalPages - 3) {
+                          return <span key={`ellipsis-${page}`} className="px-3 py-2 text-gray-500">...</span>
+                        }
+                        return null
+                      }
+                      
+                      return (
+                        <button
+                          key={page}
+                          onClick={() => handlePageChange(page)}
+                          className={`px-3 py-2 text-sm font-medium rounded-md ${
+                            page === currentPage
+                              ? "text-blue-600 bg-blue-50 border border-blue-300 dark:bg-blue-900 dark:text-blue-200 dark:border-blue-700"
+                              : "text-gray-500 bg-white border border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
+                          }`}
+                        >
+                          {page}
+                        </button>
+                      )
+                    })}
+                  </div>
+                  
+                  <button
+                    onClick={() => handlePageChange(currentPage + 1)}
+                    disabled={currentPage === totalPages}
+                    className="flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
+                  >
+                    Siguiente
+                    <ChevronRight size={16} className="ml-1" />
+                  </button>
+                </div>
+              )}
+            </>
+          )}
+        </div>
+      </div>
+    </div>
+  )
+}
+export default Home
+
+diff --git a/src/pages/ProductDetail.jsx b/src/pages/ProductDetail.jsx
+new file mode 100644
+index 0000000..1234567
+--- /dev/null
+++ b/src/pages/ProductDetail.jsx
@@ -0,0 +1,202 @@
+import { useState } from "react"
+import { useParams, Link } from "react-router-dom"
+import { useFetch } from "../hooks/useFetch"
+import { useCart } from "../context/CartContext"
+import { useToast } from "../context/ToastContext"
+import { api } from "../services/api"
+import { formatPrice } from "../utils/formatters"
+import LoadingSpinner from "../components/LoadingSpinner"
+import ProductCard from "../components/ProductCard"
+import { ArrowLeft, ShoppingCart, Package, Star } from "lucide-react"
+const ProductDetail = () => {
+  const { id } = useParams()
+  const [selectedImageIndex, setSelectedImageIndex] = useState(0)
+  const { addToCart } = useCart()
+  const { success, error } = useToast()
+  const { data: product, loading, error: fetchError } = useFetch(() => api.getProduct(id), [id])
+  
+  // Fetch related products (same category, excluding current product)
+  const { data: relatedProducts } = useFetch(
+    () => product ? api.getProducts({ categoryId: product.categoryId }) : Promise.resolve([]),
+    [product?.categoryId]
+  )
+  const handleAddToCart = () => {
+    if (!product) return
+    if (product.stock === 0) {
+      error("Producto sin stock")
+      return
+    }
+    addToCart(product)
+    success(`${product.name} agregado al carrito`)
+  }
+  if (loading) {
+    return (
+      <div className="flex justify-center items-center min-h-64">
+        <LoadingSpinner size="lg" />
+      </div>
+    )
+  }
+  if (fetchError || !product) {
+    return (
+      <div className="text-center py-12">
+        <Package className="mx-auto h-12 w-12 text-gray-400 mb-4" />
+        <h3 className="text-lg font-medium text-gray-900 mb-2">Producto no encontrado</h3>
+        <p className="text-gray-600 mb-4">El producto que buscas no existe o ha sido eliminado.</p>
+        <Link to="/" className="btn btn-primary">
+          Volver al catálogo
+        </Link>
+      </div>
+    )
+  }
+  const isOutOfStock = product.stock === 0
+  const images = product.images || ["/placeholder.svg?height=500&width=500"]
+  
+  // Filter related products (exclude current product and limit to 4)
+  const filteredRelatedProducts = relatedProducts
+    ?.filter(p => p.id !== product.id)
+    ?.slice(0, 4) || []
+  return (
+    <div className="max-w-6xl mx-auto">
+      {/* Breadcrumb */}
+      <nav className="mb-6">
+        <Link to="/" className="inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors">
+          <ArrowLeft size={16} className="mr-1" />
+          Volver al catálogo
+        </Link>
+      </nav>
+      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
+        {/* Product Images */}
+        <div className="space-y-4">
+          {/* Main Image */}
+          <div className="relative aspect-square bg-gray-100 rounded-lg overflow-hidden">
+            <img
+              src={images[selectedImageIndex] || "/placeholder.svg"}
+              alt={product.name}
+              className="w-full h-full object-cover"
+            />
+            {isOutOfStock && (
+              <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
+                <span className="bg-red-600 text-white px-4 py-2 rounded-full text-lg font-medium">Sin Stock</span>
+              </div>
+            )}
+          </div>
+          {/* Thumbnail Images */}
+          {images.length > 1 && (
+            <div className="flex space-x-2 overflow-x-auto">
+              {images.map((image, index) => (
+                <button
+                  key={index}
+                  onClick={() => setSelectedImageIndex(index)}
+                  className={`flex-shrink-0 w-20 h-20 rounded-md overflow-hidden border-2 transition-colors ${
+                    selectedImageIndex === index ? "border-blue-600 dark:border-blue-400" : "border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500"
+                  }`}
+                >
+                  <img
+                    src={image || "/placeholder.svg"}
+                    alt={`${product.name} ${index + 1}`}
+                    className="w-full h-full object-cover"
+                  />
+                </button>
+              ))}
+            </div>
+          )}
+        </div>
+        {/* Product Info */}
+        <div className="space-y-6">
+          <div>
+            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">{product.name}</h1>
+            {/* Rating placeholder */}
+            <div className="flex items-center mb-4">
+              <div className="flex items-center">
+                {[...Array(5)].map((_, i) => (
+                  <Star key={i} size={16} className={`${i < 4 ? "text-yellow-400 fill-current" : "text-gray-300 dark:text-gray-600"}`} />
+                ))}
+              </div>
+              <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">(4.0) • 24 reseñas</span>
+            </div>
+          </div>
+          {/* Price and Stock */}
+          <div className="border-t border-b border-gray-200 dark:border-gray-600 py-6">
+            <div className="flex items-center justify-between mb-4">
+              <span className="text-3xl font-bold text-blue-600 dark:text-blue-400">{formatPrice(product.price)}</span>
+              <span className={`text-lg font-medium ${isOutOfStock ? "text-red-600 dark:text-red-400" : "text-green-600 dark:text-green-400"}`}>
+                {isOutOfStock ? "Sin stock" : `${product.stock} disponibles`}
+              </span>
+            </div>
+            {/* Stock indicator */}
+            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
+              <div
+                className={`h-2 rounded-full ${
+                  product.stock > 10 ? "bg-green-500" : product.stock > 5 ? "bg-yellow-500" : "bg-red-500"
+                }`}
+                style={{ width: `${Math.min((product.stock / 20) * 100, 100)}%` }}
+              ></div>
+            </div>
+            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
+              {product.stock > 10 ? "En stock" : product.stock > 0 ? "Pocas unidades" : "Agotado"}
+            </p>
+          </div>
+          {/* Description */}
+          <div>
+            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Descripción</h3>
+            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">{product.description}</p>
+          </div>
+          {/* Add to Cart */}
+          <div className="space-y-4">
+            <button
+              onClick={handleAddToCart}
+              disabled={isOutOfStock}
+              className={`w-full flex items-center justify-center gap-3 py-3 px-6 rounded-lg font-medium text-lg transition-colors ${
+                isOutOfStock
+                  ? "bg-gray-200 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed"
+                  : "bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
+              }`}
+            >
+              <ShoppingCart size={20} />
+              {isOutOfStock ? "Producto Agotado" : "Agregar al Carrito"}
+            </button>
+            {!isOutOfStock && (
+              <p className="text-sm text-gray-600 dark:text-gray-400 text-center">Envío gratis en pedidos superiores a €50</p>
+            )}
+          </div>
+          {/* Product Details */}
+          <div className="border-t border-gray-200 dark:border-gray-600 pt-6">
+            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Detalles del producto</h3>
+            <dl className="space-y-2">
+              <div className="flex justify-between">
+                <dt className="text-gray-600 dark:text-gray-400">SKU:</dt>
+                <dd className="text-gray-900 dark:text-gray-100">#{product.id.toString().padStart(6, "0")}</dd>
+              </div>
+              <div className="flex justify-between">
+                <dt className="text-gray-600 dark:text-gray-400">Disponibilidad:</dt>
+                <dd className={isOutOfStock ? "text-red-600 dark:text-red-400" : "text-green-600 dark:text-green-400"}>
+                  {isOutOfStock ? "Agotado" : "En stock"}
+                </dd>
+              </div>
+              <div className="flex justify-between">
+                <dt className="text-gray-600 dark:text-gray-400">Categoría:</dt>
+                <dd className="text-gray-900 dark:text-gray-100">Categoría #{product.categoryId}</dd>
+              </div>
+            </dl>
+          </div>
+        </div>
+      </div>
+      
+      {/* Related Products */}
+      {filteredRelatedProducts.length > 0 && (
+        <div className="mt-16">
+          <div className="border-t border-gray-200 dark:border-gray-600 pt-8">
+            <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">Productos Relacionados</h2>
+            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
+              {filteredRelatedProducts.map((relatedProduct) => (
+                <ProductCard key={relatedProduct.id} product={relatedProduct} />
+              ))}
+            </div>
+          </div>
+        </div>
+      )}
+    </div>
+  )
+}
+export default ProductDetail
+
+diff --git a/src/pages/Cart.jsx b/src/pages/Cart.jsx
+new file mode 100644
+index 0000000..1234567
+--- /dev/null
+++ b/src/pages/Cart.jsx
@@ -0,0 +1,243 @@
+import { useState } from "react"
+import { Link } from "react-router-dom"
+import { useCart } from "../context/CartContext"
+import { useToast } from "../context/ToastContext"
+import { api } from "../services/api"
+import { formatPrice } from "../utils/formatters"
+import EmptyState from "../components/EmptyState"
+import LoadingSpinner from "../components/LoadingSpinner"
+import { ShoppingCart, Minus, Plus, Trash2, ArrowLeft, CreditCard } from "lucide-react"
+const Cart = () => {
+  const { items, total, updateQuantity, removeFromCart, clearCart } = useCart()
+  const { success, error } = useToast()
+  const [isCheckingOut, setIsCheckingOut] = useState(false)
+  const handleQuantityChange = (productId, newQuantity) => {
+    if (newQuantity < 1) {
+      removeFromCart(productId)
+      return
+    }
+    updateQuantity(productId, newQuantity)
+  }
+  const handleRemoveItem = (productId, productName) => {
+    removeFromCart(productId)
+    success(`${productName} eliminado del carrito`)
+  }
+  const handleClearCart = () => {
+    if (window.confirm("¿Estás seguro de que quieres vaciar el carrito?")) {
+      clearCart()
+      success("Carrito vaciado")
+    }
+  }
+  const validateStock = async () => {
+    const stockErrors = []
+    for (const item of items) {
+      try {
+        const product = await api.getProduct(item.id)
+        if (product.stock < item.quantity) {
+          stockErrors.push({
+            name: item.name,
+            available: product.stock,
+            requested: item.quantity,
+          })
+        }
+      } catch (err) {
+        stockErrors.push({
+          name: item.name,
+          error: "Producto no encontrado",
+        })
+      }
+    }
+    return stockErrors
+  }
+  const handleCheckout = async () => {
+    if (items.length === 0) {
+      error("El carrito está vacío")
+      return
+    }
+    setIsCheckingOut(true)
+    try {
+      // Validate stock for all items
+      const stockErrors = await validateStock()
+      if (stockErrors.length > 0) {
+        const errorMessages = stockErrors.map((err) => {
+          if (err.error) {
+            return `${err.name}: ${err.error}`
+          }
+          return `${err.name}: Solo ${err.available} disponibles (solicitaste ${err.requested})`
+        })
+        error(`Stock insuficiente:\n${errorMessages.join("\n")}`)
+        setIsCheckingOut(false)
+        return
+      }
+      // Update stock for each item
+      for (const item of items) {
+        const product = await api.getProduct(item.id)
+        const newStock = product.stock - item.quantity
+        await api.updateProductStock(item.id, newStock)
+      }
+      // Clear cart and show success
+      clearCart()
+      success("¡Compra realizada exitosamente! El stock ha sido actualizado.")
+    } catch (err) {
+      error("Error al procesar la compra: " + err.message)
+    } finally {
+      setIsCheckingOut(false)
+    }
+  }
+  if (items.length === 0) {
+    return (
+      <div>
+        <div className="flex items-center justify-between mb-8">
+          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Carrito de Compras</h1>
+        </div>
+        <EmptyState
+          icon={ShoppingCart}
+          title="Tu carrito está vacío"
+          description="Agrega algunos productos para comenzar tu compra"
+          action={
+            <Link to="/" className="btn btn-primary">
+              Explorar productos
+            </Link>
+          }
+        />
+      </div>
+    )
+  }
+  return (
+    <div className="max-w-4xl mx-auto">
+      {/* Header */}
+      <div className="flex items-center justify-between mb-8">
+        <div>
+          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Carrito de Compras</h1>
+          <p className="text-gray-600 dark:text-gray-300 mt-1">
+            {items.length} producto{items.length !== 1 ? "s" : ""} en tu carrito
+          </p>
+        </div>
+        <Link to="/" className="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors">
+          <ArrowLeft size={16} className="mr-1" />
+          Seguir comprando
+        </Link>
+      </div>
+      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
+        {/* Cart Items */}
+        <div className="lg:col-span-2 space-y-4">
+          {/* Clear cart button */}
+          <div className="flex justify-end">
+            <button onClick={handleClearCart} className="text-sm text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors">
+              Vaciar carrito
+            </button>
+          </div>
+          {/* Items list */}
+          <div className="space-y-4">
+            {items.map((item) => (
+              <CartItem key={item.id} item={item} onQuantityChange={handleQuantityChange} onRemove={handleRemoveItem} />
+            ))}
+          </div>
+        </div>
+        {/* Order Summary */}
+        <div className="lg:col-span-1">
+          <div className="card p-6 sticky top-4">
+            <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Resumen del pedido</h2>
+            <div className="space-y-3 mb-6">
+              {items.map((item) => (
+                <div key={item.id} className="flex justify-between text-sm">
+                  <span className="text-gray-600 dark:text-gray-300">
+                    {item.name} × {item.quantity}
+                  </span>
+                  <span className="text-gray-900 dark:text-white">{formatPrice(item.price * item.quantity)}</span>
+                </div>
+              ))}
+            </div>
+            <div className="border-t border-gray-200 dark:border-gray-600 pt-4 mb-6">
+              <div className="flex justify-between text-lg font-semibold">
+                <span className="text-gray-900 dark:text-white">Total</span>
+                <span className="text-blue-600 dark:text-blue-400">{formatPrice(total)}</span>
+              </div>
+            </div>
+            <button
+              onClick={handleCheckout}
+              disabled={isCheckingOut}
+              className="w-full flex items-center justify-center gap-2 py-3 px-4 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
+            >
+              {isCheckingOut ? (
+                <>
+                  <LoadingSpinner size="sm" className="border-white border-t-transparent" />
+                  Procesando...
+                </>
+              ) : (
+                <>
+                  <CreditCard size={18} />
+                  Proceder al checkout
+                </>
+              )}
+            </button>
+            <p className="text-xs text-gray-500 dark:text-gray-400 text-center mt-3">
+              Al hacer clic en "Proceder al checkout", se validará el stock y se actualizará automáticamente.
+            </p>
+          </div>
+        </div>
+      </div>
+    </div>
+  )
+}
+const CartItem = ({ item, onQuantityChange, onRemove }) => {
+  return (
+    <div className="card p-4">
+      <div className="flex items-center space-x-4">
+        {/* Product Image */}
+        <div className="flex-shrink-0">
+          <img
+            src={item.images?.[0] || "/placeholder.svg?height=80&width=80"}
+            alt={item.name}
+            className="w-20 h-20 object-cover rounded-md"
+          />
+        </div>
+        {/* Product Info */}
+        <div className="flex-1 min-w-0">
+          <Link to={`/product/${item.id}`} className="block">
+            <h3 className="text-lg font-medium text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors">{item.name}</h3>
+          </Link>
+          <p className="text-sm text-gray-600 dark:text-gray-300 mt-1 line-clamp-2">{item.description}</p>
+          <p className="text-lg font-semibold text-blue-600 dark:text-blue-400 mt-2">{formatPrice(item.price)}</p>
+        </div>
+        {/* Quantity Controls */}
+        <div className="flex items-center space-x-3">
+          <div className="flex items-center border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800">
+            <button
+              onClick={() => onQuantityChange(item.id, item.quantity - 1)}
+              className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-white"
+              aria-label="Disminuir cantidad"
+            >
+              <Minus size={16} />
+            </button>
+            <span className="px-3 py-1 text-center min-w-12 text-gray-900 dark:text-white">{item.quantity}</span>
+            <button
+              onClick={() => onQuantityChange(item.id, item.quantity + 1)}
+              className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-white"
+              aria-label="Aumentar cantidad"
+            >
+              <Plus size={16} />
+            </button>
+          </div>
+          {/* Remove Button */}
+          <button
+            onClick={() => onRemove(item.id, item.name)}
+            className="p-2 text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition-colors"
+            aria-label="Eliminar producto"
+          >
+            <Trash2 size={18} />
+          </button>
+        </div>
+      </div>
+      {/* Item Total */}
+      <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
+        <div className="flex justify-between items-center">
+          <span className="text-sm text-gray-600 dark:text-gray-300">Subtotal:</span>
+          <span className="text-lg font-semibold text-gray-900 dark:text-white">{formatPrice(item.price * item.quantity)}</span>
+        </div>
+      </div>
+    </div>
+  )
+}
+export default Cart

